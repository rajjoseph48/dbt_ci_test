name: dbt CI Pipeline

on:
  pull_request:
    branches: [main]
    paths:
      - 'models/**'
      - 'tests/**'
      - 'macros/**'
      - 'dbt_project.yml'
      - 'packages.yml'
  push:
    branches: [main]

env:
  DBT_PROFILES_DIR: ${{ github.workspace }}

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  dbt_test:
    runs-on: ubuntu-latest
    name: dbt Test & Build
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        dbt-target: [dev]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Setup dbt profile
        run: |
          mkdir -p ~/.dbt
          cp profiles.yml ~/.dbt/profiles.yml
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Install dbt packages
        run: dbt deps
        
      - name: Debug dbt connection
        run: dbt debug --target ${{ matrix.dbt-target }}
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Download main branch artifacts (for state comparison)
        if: github.event_name == 'pull_request'
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: dbt_ci.yml
          branch: main
          name: dbt-artifacts-dev
          path: ./state/
          if_no_artifact_found: ignore
        continue-on-error: true
          
      - name: Load seed data
        run: dbt seed --target ${{ matrix.dbt-target }}
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Run dbt models (state-aware for PRs)
        if: github.event_name == 'pull_request'
        run: |
          if [ -d "./state/target" ]; then
            echo "📊 Running modified models and downstream dependencies..."
            dbt run --target ${{ matrix.dbt-target }} --select state:modified+ --defer --state ./state/target/ > dbt_run_output.log 2>&1
          else
            echo "⚠️ No previous state found, running all models..."
            dbt run --target ${{ matrix.dbt-target }} > dbt_run_output.log 2>&1
          fi
          
          # Display output and capture for PR comment
          cat dbt_run_output.log
          
          # Save key information for PR comment
          echo "## dbt Run Results" > dbt_run_summary.md
          echo "" >> dbt_run_summary.md
          
          # Extract model run results
          if grep -q "Completed successfully" dbt_run_output.log; then
            MODELS_RUN=$(grep -c "OK created" dbt_run_output.log || echo "0")
            echo "✅ **Models Built**: $MODELS_RUN" >> dbt_run_summary.md
            
            # List specific models that were built
            echo "" >> dbt_run_summary.md
            echo "**Models Created:**" >> dbt_run_summary.md
            grep "OK created" dbt_run_output.log | sed 's/.*OK created /- /' >> dbt_run_summary.md || echo "- (No models listed)" >> dbt_run_summary.md
          else
            echo "❌ **dbt run failed**" >> dbt_run_summary.md
          fi
          
          # Extract timing information
          if grep -q "Completed in" dbt_run_output.log; then
            TIMING=$(grep "Completed in" dbt_run_output.log | tail -1)
            echo "" >> dbt_run_summary.md
            echo "⏱️ **$TIMING**" >> dbt_run_summary.md
          fi
          
          echo "" >> dbt_run_summary.md
          echo "<details>" >> dbt_run_summary.md
          echo "<summary>📋 View Full dbt Run Log</summary>" >> dbt_run_summary.md
          echo "" >> dbt_run_summary.md
          echo '```' >> dbt_run_summary.md
          cat dbt_run_output.log >> dbt_run_summary.md
          echo '```' >> dbt_run_summary.md
          echo "</details>" >> dbt_run_summary.md
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Run all dbt models (main branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: dbt run --target ${{ matrix.dbt-target }}
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Run dbt tests (state-aware for PRs)
        if: github.event_name == 'pull_request'
        run: |
          if [ -d "./state/target" ]; then
            echo "🧪 Testing modified models and downstream dependencies..."
            dbt test --target ${{ matrix.dbt-target }} --select state:modified+ --defer --state ./state/target/ > dbt_test_output.log 2>&1
          else
            echo "⚠️ No previous state found, running all tests..."
            dbt test --target ${{ matrix.dbt-target }} > dbt_test_output.log 2>&1
          fi
          
          # Display output and capture for PR comment
          cat dbt_test_output.log
          
          # Save test information for PR comment
          echo "" >> dbt_run_summary.md
          echo "## dbt Test Results" >> dbt_run_summary.md
          echo "" >> dbt_run_summary.md
          
          # Extract test results
          if grep -q "Completed successfully" dbt_test_output.log; then
            TESTS_RUN=$(grep -c "PASS" dbt_test_output.log || echo "0")
            TESTS_FAILED=$(grep -c "FAIL" dbt_test_output.log || echo "0")
            echo "✅ **Tests Passed**: $TESTS_RUN" >> dbt_run_summary.md
            if [ "$TESTS_FAILED" -gt 0 ]; then
              echo "❌ **Tests Failed**: $TESTS_FAILED" >> dbt_run_summary.md
            fi
            
            # List specific tests that ran
            echo "" >> dbt_run_summary.md
            echo "**Tests Executed:**" >> dbt_run_summary.md
            grep -E "(PASS|FAIL)" dbt_test_output.log | sed 's/.*\(PASS\|FAIL\) /- /' >> dbt_run_summary.md || echo "- (No tests listed)" >> dbt_run_summary.md
          else
            echo "❌ **dbt test failed**" >> dbt_run_summary.md
          fi
          
          # Extract test timing
          if grep -q "Completed in" dbt_test_output.log; then
            TEST_TIMING=$(grep "Completed in" dbt_test_output.log | tail -1)
            echo "⏱️ **$TEST_TIMING**" >> dbt_run_summary.md
          fi
          
          echo "" >> dbt_run_summary.md
          echo "<details>" >> dbt_run_summary.md
          echo "<summary>🧪 View Full dbt Test Log</summary>" >> dbt_run_summary.md
          echo "" >> dbt_run_summary.md
          echo '```' >> dbt_run_summary.md
          cat dbt_test_output.log >> dbt_run_summary.md
          echo '```' >> dbt_run_summary.md
          echo "</details>" >> dbt_run_summary.md
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Run all dbt tests (main branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: dbt test --target ${{ matrix.dbt-target }}
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Generate dbt docs
        run: dbt docs generate --target ${{ matrix.dbt-target }}
        env:
          DBT_HOST: localhost
          DBT_USER: postgres
          DBT_PASSWORD: postgres
          DBT_DATABASE: ecommerce
          DBT_SCHEMA: "pr_${{ github.event.pull_request.number || 'main' }}_analytics"
          
      - name: Upload dbt artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dbt-artifacts-${{ matrix.dbt-target }}
          path: |
            target/
            logs/
            dbt_run_summary.md
            dbt_run_output.log
            dbt_test_output.log
            
  comment_pr:
    runs-on: ubuntu-latest
    name: Comment on PR
    needs: [dbt_test]
    if: github.event_name == 'pull_request' && always()
    steps:
      - name: Download dbt artifacts
        if: needs.dbt_test.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: dbt-artifacts-dev
          path: ./artifacts/
        continue-on-error: true
        
      - name: Comment PR Success
        if: needs.dbt_test.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let summaryContent = '✅ **dbt CI Pipeline Passed**\n\n';
            
            try {
              // Try to read the detailed summary
              const detailedSummary = fs.readFileSync('./artifacts/dbt_run_summary.md', 'utf8');
              summaryContent += detailedSummary;
            } catch (error) {
              // Fallback to basic summary
              summaryContent += '- dbt models: ✅ Built successfully (state-aware)\n- dbt tests: ✅ All tests passed\n';
            }
            
            summaryContent += '\n**Schema**: `pr_${{ github.event.pull_request.number }}_analytics`\n';
            summaryContent += '**Strategy**: Only modified models + downstream dependencies\n\n';
            summaryContent += 'This PR is ready for review! 🚀';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryContent
            })
            
      - name: Comment PR Failure
        if: needs.dbt_test.result == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **dbt CI Pipeline Failed**\n\n- dbt tests: ❌ Failed\n\nPlease check the workflow logs and fix the issues before merging. 🔧'
            })
            
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup PR Schema
    needs: [dbt_test]
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Cleanup PR Schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d ecommerce -c "DROP SCHEMA IF EXISTS pr_${{ github.event.pull_request.number }}_analytics CASCADE;"
        continue-on-error: true